# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import zoo_pb2 as zoo__pb2


class ZooServiceStub(object):
    """Define a service for a zoo RPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/zoo.ZooService/create',
                request_serializer=zoo__pb2.CreateZooRequest.SerializeToString,
                response_deserializer=zoo__pb2.CreateZooResponse.FromString,
                )
        self.update = channel.unary_unary(
                '/zoo.ZooService/update',
                request_serializer=zoo__pb2.UpdateZooRequest.SerializeToString,
                response_deserializer=zoo__pb2.UpdateZooResponse.FromString,
                )
        self.delete = channel.unary_unary(
                '/zoo.ZooService/delete',
                request_serializer=zoo__pb2.DeleteZooRequest.SerializeToString,
                response_deserializer=zoo__pb2.DeleteZooResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/zoo.ZooService/get',
                request_serializer=zoo__pb2.GetZooRequest.SerializeToString,
                response_deserializer=zoo__pb2.GetZooResponse.FromString,
                )
        self.search = channel.unary_unary(
                '/zoo.ZooService/search',
                request_serializer=zoo__pb2.ReadAllZooRequest.SerializeToString,
                response_deserializer=zoo__pb2.ReadAllZooResponse.FromString,
                )


class ZooServiceServicer(object):
    """Define a service for a zoo RPC
    """

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZooServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=zoo__pb2.CreateZooRequest.FromString,
                    response_serializer=zoo__pb2.CreateZooResponse.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=zoo__pb2.UpdateZooRequest.FromString,
                    response_serializer=zoo__pb2.UpdateZooResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=zoo__pb2.DeleteZooRequest.FromString,
                    response_serializer=zoo__pb2.DeleteZooResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=zoo__pb2.GetZooRequest.FromString,
                    response_serializer=zoo__pb2.GetZooResponse.SerializeToString,
            ),
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=zoo__pb2.ReadAllZooRequest.FromString,
                    response_serializer=zoo__pb2.ReadAllZooResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zoo.ZooService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ZooService(object):
    """Define a service for a zoo RPC
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zoo.ZooService/create',
            zoo__pb2.CreateZooRequest.SerializeToString,
            zoo__pb2.CreateZooResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zoo.ZooService/update',
            zoo__pb2.UpdateZooRequest.SerializeToString,
            zoo__pb2.UpdateZooResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zoo.ZooService/delete',
            zoo__pb2.DeleteZooRequest.SerializeToString,
            zoo__pb2.DeleteZooResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zoo.ZooService/get',
            zoo__pb2.GetZooRequest.SerializeToString,
            zoo__pb2.GetZooResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zoo.ZooService/search',
            zoo__pb2.ReadAllZooRequest.SerializeToString,
            zoo__pb2.ReadAllZooResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
